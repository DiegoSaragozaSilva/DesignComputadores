Design de Computadores
Aula 10

Decomposição de Instruções
Tipo R

WWW.INSPER.EDU.BR

●

Tópicos:
–

Formato das instruções;

–

Codificação das instruções;

–

Análise do funcionamento das instruções;

–

Esboço de fluxo de dados que execute essas
instruções;

–

Simulação manual do funcionamento do FD;

–

Implementação do FD em VHDL.

19/03/19

●

Como visto anteriormente, o MIPS possui:
–

●

3 formatos básicos de instruções:
●

Tipo R (registro);

●

Tipo I (imediato);

●

Tipo J (salto).

Além disso, a codificação dessas instruções:
–

Utiliza uma palavra de 32 bits;

–

Que foi dividida em campos bem definidos.

6 bits

5 bits

5 bits

5 bits

5 bits

6 bits

opcode

Rs

Rt

Rd

shamt

funct

MSB (b31)

19/03/19

LSB (b0)

●

Esses campos podem ser agrupados:
–

●

Dependendo do tipo de instrução.

O significado dos nomes dos campos:
●

●

●

●

●

●

Opcode: Contém o código da instrução a ser executada;
Rs: O número do registrador com o primeiro operando
da instrução definida em op;
Rt: O número do registrador com o segundo operando
da instrução definida em op;
Rd: O número do registrador de destino do resultado da
instrução definida em op;
shamt: Total de deslocamento (shift amount).
funct: Seleciona uma variação específica da operação
definida em opcode.

6 bits

5 bits

5 bits

5 bits

5 bits

6 bits

opcode

Rs

Rt

Rd

shamt

funct

19/03/19

●

Analisaremos o formato das instruções do
tipo R:
–

●

●

Para determinar a estrutura de hardware
necessária para implementar esse tipo de
instrução.

Todas instruções do tipo R:
–

Utilizam 3 registradores;

–

O campo opcode é sempre igual a zero;

–

O campo “funct” define a função a ser realizada.

A função dos registradores:
–

Rs e Rt contém os argumentos da operação;

–

Rd é o destino do resultado da operação.

19/03/19

●

A soma mostrada abaixo:
add $t0, $s1, $s2

●

Qual seria a sua codificação?
–

Dicas:
●

Consulte valor de “funct” e o endereço dos registradores
no greencard.

6 bits

5 bits

5 bits

5 bits

5 bits

6 bits

31~26

25 ~21

20 ~16

15 ~11

10 ~6

5 ~0

opcode

Rs

Rt

Rd

shamt

funct

0x00

19/03/19

●

A subtração mostrada abaixo:
sub $a0, $sp, $s2

●

Qual seria a sua codificação?
–

Dica: consulte o greencard.

6 bits

5 bits

5 bits

5 bits

5 bits

6 bits

31~26

25 ~21

20 ~16

15 ~11

10 ~6

5 ~0

opcode

Rs

Rt

Rd

shamt

funct

0x00

19/03/19

●

Agora que a codificação das instruções do
tipo R, já é conhecida:
–

●

●

Vamos analisar o seu funcionamento.

Mas, primeiro vamos lembrar:
–

De alguns blocos construtivos;

–

Algumas características do MIPS.

E, depois, conhecer a sintaxe básica:
–

19/03/19

Da RTN (register transfer notation).

●

Lembrando dos blocos construtivos que
conhecemos:
–

Registrador de uso geral (n bits, configurável);

–

Memória (RAM e ROM);

–

Banco de Registradores;

–

ULA:
●

●

–

19/03/19

Considere que a ULA executa qualquer
operação lógica ou aritmética;
Quando acabar a analise de todas instruções,
saberemos quais operações a ULA necessitará;

MUX.

Características do MIPS original
–

Arquitetura do tipo Load/Store;

–

Granularidade do endereçamento da memória:
●

–

Um byte (endereços de 32 bits).

Granularidade do acesso à memória:
●

Palavra de 32 bits (2^30 palavras de memória).

–

Alinhamento do acesso à memória: 4 bytes;

–

Big Endian ou Little Endian (selecionável);

–

Formato regular para as instruções;

–

Não possui:

–
19/03/19

●

Flags de estado;

●

Suporte de hardware para gerenciar pilhas.

Possui interrupção através do coprocessador.

●

Continuação:
–

Divide a execução de uma instrução em 5 partes
menores ou ciclos:
●

Busca da instrução (instruction fetch: IF):
–

●

Decodificação (instruction decode: ID):
–
–

●

Escreve ou lê dados na memória. Só funciona nas
instruções lw e sw.

Escreve o resultado nos registradores (write back: WB)
–

19/03/19

A ALU faz a operação indicada na instrução.

Acesso à memória (memory access: MA):
–

●

Lê os dados a serem utilizados;
Calcula o endereço da próxima instrução (incrementa o PC).

Execução (EX):
–

●

Carrega da posição de memória apontada pelo PC, a
instrução a ser executada.

Ocorre na maioria das instruções.

RTN
●

Básico sobre RTN (register transfer notation):
–

Formaliza a descrição :
●

Do funcionamento. RTN abstrata: usa a arquitetura;

●

Da estrutura. RTN concreta: usa a organização:
–

–

Cada passo é um pulso de clock.

Misto de linguagem natural e expressões
matemáticas:
●

Estabelece a relação entre o que está do lado esquerdo
do símbolo com o que está do lado direito.

–

As transferências só acontecem no pulso de clock;

–

Considera que os sinais estão estáveis no
momento do clock;

–

Considera que a lógica combinacional tem
resposta instantânea.

19/03/19

Símbolos e significados em RTN:
Símbolo

Significado

<-

Transferência entre registradores: Regesquerda recebe o valor do Regdireita .

[]

Índice de Word: seleciona uma palavra, ou a faixa de palavras, da memória
indicada.

<>
n...m

Índice de Bit: seleciona a faixa de bits ou um bit da memória indicada.
Índice de Faixa: indica a faixa da esquerda para a direita (pode ser
decrescente).

->

If-then: verdadeiro na esquerda implica receber valor ou aplicar ação na
direita.

:=

Definição: ajuda a documentar. ld(opcode:=3) → R[ra] ← M[MA]

#

Concatenação de bits.

:

Separador de ações que acontecem em paralelo.

;

Separador de ações que acontecem em sequência: da esquerda para direita.

@

Repete o número de vezes, da direita, o que está na esquerda (concatena).

{}

Modificador de operação.

()

Agrupamento de operações ou valores.

=≠<≤≥>
+-*/
^v¬⊕≡
19/03/19

Operadores de comparação, retorna valores binários (≠ pode ser: !=).
Operadores aritméticos.
Operadores lógicos: and, or, not, xor, equivalência. Pode usar: & | !

●

Exemplos:
–

Flip-flop:

–

Registrador: A<m..1> ← B<m..1>

–

Incremento do PC: PC ← PC + 4

–

Carrega instrução da memória:
●

●

–

RTN concreta: MAd ← PC : C ← PC + 4
MD ← M[MAd] : PC ← C
IR ← MD
(16@Reg1<15>#Reg1<15..0>)

Seleção de registrador (rn) no banco de regs.:
●

19/03/19

RTN abstrata: IR ← M[PC]

Extensão de sinal de 16 para 32 bits, do Reg1:
●

–

A←B

A ← (rn = 0 → 0 : rn != 0 → R[rn] )

Memória
●

Em relação ao modelo de memória que
utilizaremos:
–

As instruções estão na memória do computador:
●

No segmento “text”.

–

Dentro do processador existe uma memória
específica para instruções;

–

Que é separada da memória do computador:
●

19/03/19

E alimentada através de um cache.

Análise
●

Utilizando a definição da instrução “add”*:
–

Defina os blocos construtivos necessários para
executá-la;

–

Descreva, em RTN, o fluxo entre esses blocos;

–

Para cada comando RTN:
●

Conecte os blocos construtivos necessários;

●

Para que a instrução execute;

●

E anote os pontos de controle utilizados.

–

Faça um rascunho do fluxo de dados;

–

Simule manualmente (papel e caneta).

*A definição das instruções pode ser encontrada:
– No greencard;
– Na página de atividades (links úteis).
19/03/19

●

Quando o FD estiver pronto:
–

●

Verifique se atende o funcionamento de todas as
outras instruções, do tipo R, que
implementaremos:
●

Subtração (sub);

●

E lógico (and);

●

OU lógico (or);

●

Comparação Menor Que (set if less than: slt).

Crie uma tabela com as instruções e os
pontos de controle:
–

Descrevendo o estado de cada ponto de controle;

–

Para cada instrução implementada.

19/03/19

●

Exemplo de tabela:
–

Com os sinais de controle;

–

E as instruções.

19/03/19

Instrução

CtrlR1

CtrlR2

OpALU

RegWr

MemRd

MemWr

add

1

0

001

1

0

0

sub

0

1

010

1

0

0

…

...

...

…

...

...

...

slt

0

1

100

1

0

0

●

Agora que o FD atende as instruções R:
–

Implemente em VHDL;

–

Verifique o funcionamento usando simulação:
●

–

Implemente no kit de desenvolvimento:
●

19/03/19

Use a tabela com os pontos de controle.

E faça os testes necessários.

www.insper.edu.br

20

